//
// OrderDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderDTO: Codable, JSONEncodable, Hashable {

    public static let countRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** 订单唯一标识符 */
    public var ticketUUID: UUID
    /** 顾客姓名 */
    public var customerName: String
    /** 产品名称 */
    public var productName: String
    /** 商品数量（最小值为1） */
    public var count: Int
    /** 取餐时间 */
    public var pickupTime: Date
    public var temperature: TemperatureOption
    /** 是否使用顾客自带杯子 */
    public var isUserCup: Bool

    public init(ticketUUID: UUID, customerName: String, productName: String, count: Int, pickupTime: Date, temperature: TemperatureOption, isUserCup: Bool) {
        self.ticketUUID = ticketUUID
        self.customerName = customerName
        self.productName = productName
        self.count = count
        self.pickupTime = pickupTime
        self.temperature = temperature
        self.isUserCup = isUserCup
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ticketUUID
        case customerName
        case productName
        case count
        case pickupTime
        case temperature
        case isUserCup
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(ticketUUID, forKey: .ticketUUID)
        try container.encode(customerName, forKey: .customerName)
        try container.encode(productName, forKey: .productName)
        try container.encode(count, forKey: .count)
        try container.encode(pickupTime, forKey: .pickupTime)
        try container.encode(temperature, forKey: .temperature)
        try container.encode(isUserCup, forKey: .isUserCup)
    }
}

